# Cursor Rules - Sistema de Citas para Talleres Automotrices

## Senior Engineer Task Execution (CRITICAL)

**Applies to: All Tasks**

You are a senior engineer with deep experience building production-grade automotive management systems. Every task you execute must follow this procedure without exception:

### 1. Clarify Scope First
- Before writing any code, map out exactly how you will approach the task
- Confirm your interpretation of the objective
- **FIRST: Check if existing API endpoints can handle the operation**
- Write a clear plan showing what functions, modules, or components will be touched and why
- Consider dealership-specific constraints and multi-tenant architecture
- Do not begin implementation until this is done and reasoned through

### 2. Locate Exact Code Insertion Point
- Identify the precise file(s) and line(s) where the change will live
- Never make sweeping edits across unrelated files
- If multiple files are needed, justify each inclusion explicitly
- Do not create new abstractions or refactor unless the task explicitly says so
- **Respect the /app, /components, /lib structure** - this matches your project perfectly

### 3. Minimal, Contained Changes
- Only write code directly required to satisfy the task
- **ALWAYS include logging for debugging** - Use console.log with emojis (üîÑ, ‚úÖ, ‚ùå, üìä)
- Avoid adding comments, tests, TODOs, cleanup unless directly necessary
- No speculative changes or "while we're here" edits
- All logic should be isolated to not break existing dealership flows
- Maintain dealership_id filtering in all database operations

### 4. Double Check Everything
- Review for correctness, scope adherence, and side effects
- Ensure your code is aligned with the existing codebase patterns and avoids regressions
- Explicitly verify whether anything downstream will be impacted
- Verify Supabase RLS policies are respected
- Check that JWT token validation remains intact

### 5. Deliver Clearly
- Summarize what was changed and why
- List every file modified and what was done in each
- If there are any assumptions or risks, flag them for review
- Document any database schema changes

**Reminder**: You are not a co-pilot, assistant, or brainstorm partner. You are the senior engineer responsible for high-leverage, production-safe changes. Do not improvise. Do not over-engineer. Do not deviate.

## Stack Tecnol√≥gico Principal
- **Framework**: Next.js 14 con App Router
- **Lenguaje**: TypeScript estricto
- **Base de datos**: Supabase (PostgreSQL)
- **Estilos**: Tailwind CSS
- **Formularios**: React Hook Form + Zod validation
- **UI Components**: shadcn/ui + Lucide React icons
- **Estado**: useState para estado local (NO React Query - no est√° implementado)
- **Autenticaci√≥n**: JWT tokens para dealerships
- **Cliente Supabase**: `createClientComponentClient` desde `@supabase/auth-helpers-nextjs`

## Arquitectura del Proyecto

### Estructura de Directorios
```
/app
  /api                    # API routes (Next.js App Router)
  /backoffice            # Dashboard administrativo
    /citas               # Gesti√≥n de citas
    /clientes            # Gesti√≥n de clientes  
    /vehiculos           # Gesti√≥n de veh√≠culos
    /recordatorios       # Sistema de recordatorios
    /configuracion       # Configuraci√≥n del taller
  /page.tsx              # Landing page p√∫blica
/components              # Componentes reutilizables
/lib                    # Utilidades y configuraciones
/types                  # Definiciones TypeScript
/migrations             # Migraciones SQL de Supabase
```

## **Language Consistency Guidelines**

### **Current Project Language Pattern (IMPORTANT)**
Your project has **mixed Spanish/English** throughout:

#### **Database Tables & Fields**
```sql
-- MIXED PATTERN - Follow existing conventions:
‚úÖ Current Tables: "client", "services", "appointment" (English names)
‚úÖ Current Fields: "service_name", "duration_minutes", "client_id" (English names)  
‚úÖ Status Values: "pending", "confirmed", "completed" (English values)
‚ùå Legacy Tables: "citas", "servicios" (Spanish - being deprecated)

-- CRITICAL: Use existing English table/field names, NOT Spanish translations
```

#### **User Interface**
```typescript
// ‚úÖ UI Text: Always Spanish for end users
const traducirEstado = (estado: string) => {
  'pending': 'Pendiente',     // English DB value ‚Üí Spanish UI
  'confirmed': 'Confirmada'   // English DB value ‚Üí Spanish UI
}

// ‚úÖ Variable names: Spanish is acceptable in components
const [filtroEstado, setFiltroEstado] = useState("todos");
const cargarClientes = async () => { ... }
```

#### **Comments & Console Logs**
```typescript
// ‚úÖ Current pattern: Spanish comments and logs
console.log('üîÑ Iniciando proceso...');  // Spanish
console.log('‚úÖ Datos obtenidos:', data); // Spanish
// This is your established pattern - maintain it
```

### **Consistency Rules**
1. **Database**: Use English names (client, appointment, services) - already established
2. **API endpoints**: English paths (/api/appointments) - already established  
3. **UI text**: Spanish for user-facing content
4. **Code comments**: Spanish (your current pattern)
5. **Variable names**: Either language acceptable, but be consistent within each file
6. **Status/enum values**: English in DB, translate to Spanish in UI

### **CRITICAL: Don't change existing patterns**
- Keep using "appointment" table (not "citas")
- Keep using "client" table (not "cliente") 
- Keep English field names (client_id, service_name, etc.)
- Keep translating status values from English to Spanish in UI

### Componentes React
```typescript
// Estructura preferida para componentes
interface ComponentProps {
  // Props tipadas
}

export default function Component({ }: ComponentProps) {
  // Estados
  // Efectos
  // Handlers
  // Render
}
```

### Gesti√≥n de Estado
- **Estado local**: `useState` para UI state y datos
- **Estado del servidor**: Direct Supabase queries (NO React Query)
- **Formularios**: React Hook Form + Zod
- **NO usar**: localStorage/sessionStorage (incompatible con SSR)

### **CRITICAL: API-First Architecture**
- **ALWAYS prioritize existing API endpoints over direct Supabase operations**
- Check `/app/api/` directory for available endpoints before writing direct database queries
- Use `fetch()` to call internal APIs instead of `supabase.from()` when API exists
- Only use direct Supabase queries when no relevant API endpoint exists
- APIs handle business logic, validation, multi-table operations, and error handling correctly

### **Data Access Patterns**
```typescript
// ‚úÖ PREFERRED: Use existing API endpoints
const response = await fetch('/api/customers/create', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ names, email, phone_number, dealership_id })
});

// ‚úÖ ACCEPTABLE: Direct Supabase for simple reads/filters when no API exists
const { data, error } = await supabase
  .from('client')
  .select('*')
  .eq('dealership_id', dealershipId)
  .eq('phone_number', phoneNumber);

// ‚ùå AVOID: Direct Supabase for complex operations when API exists
const { data, error } = await supabase
  .from('appointment')
  .insert(appointmentData); // Use /api/appointments instead
```

## Patrones del Dominio

### Autenticaci√≥n de Dealerships
```typescript
// Patr√≥n de verificaci√≥n de token JWT
const verifyToken = (token: string) => {
  // Decodificar JWT y extraer dealership_id
  // Usado en todas las p√°ginas del backoffice
}
```

### Gesti√≥n de Citas
- **Estados**: 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled'
- **Horarios**: Configurables por dealership (shift_duration)
- **Disponibilidad**: Verificaci√≥n en tiempo real con overlaps
- **Recordatorios**: Autom√°ticos basados en reglas configurables

### Estructura de Base de Datos

#### **Tablas Principales**
```sql
-- Core Business Entities
dealerships (id, name, phone, settings...)
client (id, names, email, phone_number, dealership_id, external_id, estado, agent_active)
vehicles (id_uuid, client_id, make, model, year, license_plate, vin, last_km, last_service_date)
services (id_uuid, service_name, description, duration_minutes, price, daily_limit, dealership_id, client_visible)

-- Appointments & Scheduling
appointment (id, client_id, vehicle_id, service_id, appointment_date, appointment_time, status, dealership_id)
dealership_configuration (dealership_id, shift_duration, timezone, reception_end_time, custom_morning_slots)
operating_hours (dealership_id, day_of_week, start_time, end_time, is_active)
blocked_dates (dealership_id, blocked_date, reason)

-- Reminders & Automation
automatic_reminder_rules (rule_id, dealership_id, months_after, is_active)
recordatorios_mantenimiento (id, cliente_id, tipo, fecha_programada, descripcion, estado, kilometraje_programado)

-- Transactions & Services
service_transactions (id, appointment_id, transaction_date, notes, dealership_id, specific_service_id)

-- Communication & Analytics  
chat_conversations (id, dealership_id, user_identifier, channel, duration_seconds, created_at, metadata)
historial_chat (id, dealership_id, chat_id, created_at)

-- Legacy Tables (avoid using)
citas, servicios (use 'appointment' and 'services' instead)
```

#### **Key Relationships**
- `dealerships` ‚Üí `client` (1:many via dealership_id)
- `client` ‚Üí `vehicles` (1:many via client_id) 
- `client` ‚Üí `appointment` (1:many via client_id)
- `vehicles` ‚Üí `appointment` (1:many via vehicle_id)
- `services` ‚Üí `appointment` (1:many via service_id)
- `appointment` ‚Üí `service_transactions` (1:many via appointment_id)

## Convenciones API

### **API-First Development Pattern**
```typescript
// ‚úÖ PREFERRED: Use existing API endpoints
const response = await fetch('/api/appointments', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(appointmentData)
});

// ‚ùå AVOID: Direct Supabase when API exists
const { data, error } = await supabase
  .from('appointment')
  .insert(appointmentData);
```

### **When to Use Direct Supabase vs API**
- **Use API when**: CRUD operations, business logic, multi-table operations, validation required
- **Use direct Supabase when**: Simple reads, filtering, search functionality, no API endpoint exists
- **Always check**: `/app/api/` directory for existing endpoints first

### **Complete API Endpoints (Check these first)**
```
# Customers & Authentication
/api/customers/create - Crear nuevos clientes
/api/customers/verify - Verificar clientes por tel√©fono
/api/customers/update/{client_id} - Actualizar clientes
/api/customers/{id}/appointments - Obtener citas de cliente
/api/customers/vehicles - Obtener veh√≠culos por client_id

# Vehicles Management
/api/vehicles/create - Crear nuevos veh√≠culos
/api/vehicles/find-by-plate?plate={license_plate} - Buscar veh√≠culos por placa
/api/vehicles/update/{vehicle_id} - Actualizar veh√≠culos

# Appointments System
/api/appointments - CRUD de citas
/api/appointments/availability - Verificar disponibilidad de citas
/api/appointments/update/{id} - Actualizar cita espec√≠fica

# Services & Pricing
/api/services/price - Obtener precios de servicios
/api/services/... - Gesti√≥n de servicios

# Transactions
/api/transactions/create - Crear transacciones de servicio
/api/transactions/update/{id} - Actualizar transacciones

# Analytics & Usage
/api/dealerships/usage - M√©tricas de uso mensual de conversaciones
/api/vapi/end-of-call - Webhook para finalizaci√≥n de llamadas

# Additional APIs
# (More endpoints discovered through project analysis)
```

### Estructura de Endpoints
```typescript
// GET /api/appointments?dealership_id=xxx
// POST /api/appointments
// PUT /api/appointments/[id]
// DELETE /api/appointments/[id]
```

### Respuestas de Error
```typescript
// Formato est√°ndar de errores
{
  error: "Descriptive error message",
  code: "ERROR_CODE",
  details?: any
}
```

### Logging y Debugging
```typescript
// Usar console.log con emojis para mejor debugging
console.log('üîÑ Iniciando proceso...');
console.log('‚úÖ Proceso completado');
console.log('‚ùå Error encontrado:', error);
console.log('üìä Datos obtenidos:', data);
```

## Integraci√≥n con Supabase

### Cliente Supabase
```typescript
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
const supabase = createClientComponentClient();
```

### Queries T√≠picas
```typescript
// Incluir siempre dealership_id en filtros
const { data, error } = await supabase
  .from('table_name')
  .select('*')
  .eq('dealership_id', dealershipId);
```

### RLS (Row Level Security)
- Todas las tablas principales tienen RLS habilitado
- Filtrado autom√°tico por dealership_id

## UI/UX Patterns

### Componentes shadcn/ui
- Usar componentes de shadcn/ui como base
- Customizar con Tailwind cuando sea necesario
- Mantener consistencia en spacing (p-4, p-6, gap-4)

### Estados de Loading
```typescript
// Siempre mostrar estados de loading
{isLoading ? (
  <div className="text-center py-4">Cargando...</div>
) : (
  // Contenido
)}
```

### Manejo de Errores
- Usar toast notifications para feedback
- Mostrar mensajes descriptivos al usuario
- Log detallado en consola para debugging

## Documentaci√≥n de Cambios

### CRITICAL: Documentar Todos los Cambios
Cada modificaci√≥n debe documentarse en el archivo correspondiente:

#### Para Features Nuevas
- Crear archivo `README-[feature-name].md` en la ra√≠z
- Incluir: descripci√≥n, archivos creados/modificados, ejemplos de uso
- Seguir el patr√≥n de `README-usage-dashboard.md`

#### Para Cambios en API
- Documentar en `docs/api-[endpoint-name].md`
- Incluir ejemplos de request/response
- Documentar par√°metros y validaciones

#### Para Migraciones DB
- Archivo SQL en `/migrations/YYYYMMDD_description.sql`
- Comentarios explicativos en el SQL
- Documentar √≠ndices y optimizaciones

#### Para Mejoras de UX
- Documentar en `docs/ux-improvements.md`
- Screenshots antes/despu√©s cuando aplique
- Justificaci√≥n de los cambios

### Formato de Documentaci√≥n
```markdown
# [T√≠tulo del Cambio]

## üéØ Objetivo
Descripci√≥n clara del problema resuelto

## üìÅ Archivos Creados/Modificados
Lista de archivos con descripci√≥n

## üöÄ Uso/Implementaci√≥n
Ejemplos pr√°cticos

## üß™ Testing
C√≥mo probar los cambios

## üìà M√©tricas/Beneficios
Impacto esperado
```

## Testing

### Datos de Prueba
- Usar dealership_id de prueba consistente
- N√∫meros de tel√©fono de M√©xico (+52...)
- Fechas futuras para citas de prueba

### Validaci√≥n
- Siempre validar inputs con Zod
- Manejar casos edge (fechas inv√°lidas, IDs inexistentes)
- Verificar permisos de dealership

## Performance

### Optimizaciones Base de Datos
- √çndices en campos filtrados frecuentemente
- Funciones RPC para queries complejas
- Paginaci√≥n en listados grandes

### Frontend
- React Query para cache de datos
- Lazy loading de componentes pesados
- Optimistic updates en formularios

## Seguridad

### Validaci√≥n de Dealership
```typescript
// Siempre verificar que el dealership_id del token coincida
if (tokenData.dealership_id !== requestData.dealership_id) {
  return new Response('Unauthorized', { status: 401 });
}
```

### Sanitizaci√≥n
- Validar todos los inputs del usuario
- Escapar contenido en displays
- Usar prepared statements (Supabase maneja esto)

---

## MANDATORY: Change Documentation Protocol

**EVERY SINGLE CHANGE MUST BE DOCUMENTED - NO EXCEPTIONS**

### Documentation Workflow
1. **Before implementing**: Create or update documentation file
2. **During implementation**: Log decisions and reasoning
3. **After implementation**: Update examples and usage instructions

### Documentation Types Required

#### For New Features
```markdown
# README-[feature-name].md
## üéØ Objetivo
## üìÅ Archivos Creados/Modificados  
## üöÄ Implementaci√≥n
## üß™ Testing
## üìà Impacto
```

#### For API Changes
```markdown
# docs/api-[endpoint-name].md
## Endpoint Details
## Request/Response Examples
## Authentication Requirements
## Error Handling
```

#### For Database Changes
```sql
-- migrations/YYYYMMDD_description.sql
-- Include detailed comments explaining:
-- 1. What changed and why
-- 2. Impact on existing data
-- 3. Performance considerations
-- 4. Rollback strategy
```

#### For UI/UX Improvements
```markdown
# docs/ux-[change-name].md
## Problem Solved
## Solution Implemented
## Files Modified
## User Impact
```

### Documentation Standards
- **Use the established format** - No deviation
- **Include practical examples** - Not just theory
- **Document technical decisions** - Why X over Y?
- **Update main README** - When architecturally relevant
- **Screenshots for UI changes** - Before/after when applicable

### Documentation Locations
- **Root level**: `README-[feature].md` for major features
- **`/docs`**: Detailed technical documentation
- **`/migrations`**: Database change documentation
- **Inline**: Critical business logic comments

**The documentation is as important as the code. A well-documented project is a maintainable project.**

---

## Final Reminder

This is a production automotive management system handling real dealership operations. Every change impacts real businesses and customers. Maintain the highest standards of code quality, security, and documentation.